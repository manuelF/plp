Object subclass: #Petroleo	instanceVariableNames: 'cantidad profundidad densidad'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Petroleo commentStamp: '<historical>' prior: 0!!!Petroleo methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/1/2014 14:05'!profundidad	^ profundidad! !!Petroleo methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/1/2014 14:07'!densidad	^ densidad.! !!Petroleo methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/1/2014 14:05'!cantidad	^ cantidad! !!Petroleo methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/1/2014 14:10'!inicializarConDensidad: unaDensidad cantidad: unaCantidad profundidad: unaProfundidad.	densidad := unaDensidad.	cantidad := unaCantidad.	profundidad := unaProfundidad.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Petroleo class	instanceVariableNames: ''!!Petroleo class commentStamp: '<historical>' prior: 0!!!Petroleo class methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/1/2014 14:10'!densidad: unaDensidad cantidad: unaCantidad profundidad: unaProfundidad	^ self new inicializarConDensidad: unaDensidad cantidad: unaCantidad profundidad: unaProfundidad.! !Object subclass: #Robot	instanceVariableNames: 'posicion posicionesSensadas centroDeControl terreno'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Robot commentStamp: '<historical>' prior: 0!!!Robot methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/3/2014 20:36'!inicializarReportandoA: unCentroDeControl recorriendo: unTerreno	posicion := (0@0).	posicionesSensadas := OrderedCollection new.	centroDeControl := unCentroDeControl.	terreno := unTerreno.! !!Robot methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/3/2014 20:36'!posicion		^ posicion.! !!Robot methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/3/2014 20:36'!y	^ posicion y.! !!Robot methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/3/2014 20:36'!x	^ posicion x.! !!Robot methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/3/2014 20:36'!posicionesSensadas	^ posicionesSensadas copy.! !!Robot methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/3/2014 20:36'!serializarPosicion	^  '(', posicion x asString, ',', posicion y asString, ')'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Robot class	instanceVariableNames: ''!!Robot class commentStamp: '<historical>' prior: 0!!!Robot class methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 20:50'!reportandoA: unCentroDeControl recorriendo: unTerreno	^ self new inicializarReportandoA: unCentroDeControl recorriendo: unTerreno.! !TestCase subclass: #TestsAjusteDeCoordenada	instanceVariableNames: 'robot'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!TestsAjusteDeCoordenada commentStamp: '<historical>' prior: 0!!!TestsAjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:27'!test03SeAjustaCorrectamenteSiLaPosicionDeDestinoEsInferiorALaActual	self ajustarCoordenada: EjeDeCoordenadas x hacia: (-1@0).	self assert: robot posicion equals: (-1@0).! !!TestsAjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:27'!test02SeAjustaLaSegundaComponenteDeLaPosicionSiElAjusteEsEnCoordenadaY	self ajustarCoordenada: EjeDeCoordenadas y hacia: (1@1).	self assert: robot posicion equals: (0@1).! !!TestsAjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/4/2014 22:16'!ajustarCoordenada: unaCoordenada hacia: unDestino	| ajuste |	ajuste := AjusteDeCoordenada para: robot yendoHacia: unDestino ajustandoCoordenada: unaCoordenada.	ajuste ejecutar.! !!TestsAjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:27'!test04SiLaDistanciaEsMayorA1SeDescomponeElAjusteEnMasDeUnMovimiento	self ajustarCoordenada: EjeDeCoordenadas x hacia: (10@0).	self assert: robot posicion equals: (10@0).! !!TestsAjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:27'!test01SeAjustaLaPrimerComponenteDeLaPosicionSiElAjusteEsEnCoordenadaX	self ajustarCoordenada: EjeDeCoordenadas x hacia: (1@1).	self assert: robot posicion equals: (1@0).! !!TestsAjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 21:26'!setUp	robot := Robot reportandoA: CentroDeControl new recorriendo: Terreno new.! !TestCase subclass: #TestsTerreno	instanceVariableNames: 'contenido'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!TestsTerreno commentStamp: '<historical>' prior: 0!!!TestsTerreno methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/17/2014 00:53'!test03NoSePuedeCrearUnTerrenoConContenidoInvalido	 | algoInvalido |  	algoInvalido := Object new.	contenido := Dictionary new					at: (0@0) put: algoInvalido;					yourself.	self should: [ Terreno conContenido: contenido ]		raise: Error		withExceptionDo: [ :e | 			self assert: e messageText  equals: 'Contenido de terreno inválido.'		].! !!TestsTerreno methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/17/2014 00:54'!test01AlSensarUnaPosicionConOroSeObtieneLaCantidadYProfundidad	| terreno resultado |		contenido := Dictionary new							 at: (10@5) put: (Oro cantidad: 20 profundidad: -1000);							 yourself. 	terreno := Terreno conContenido: contenido.	resultado := terreno contenidoEn: (10@5).		self deny: resultado isNil.	self assert: resultado cantidad equals: 20.	self assert: resultado profundidad equals: -1000.! !!TestsTerreno methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/17/2014 00:54'!test02AlSensarUnaPosicionVaciaNoSeObtieneNada	| terreno resultado |		terreno := Terreno conContenido: Dictionary new.		self shouldnt: [		resultado := terreno contenidoEn: (0@0).	] raise:  Error.	self assert: (resultado isKindOf: Vacio).! !TestCase subclass: #TestsCentroDeControl	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!TestsCentroDeControl commentStamp: '<historical>' prior: 0!!!TestsCentroDeControl methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:27'!test01ElCentroDeControlDirigeAlRobotALosPuntosDeInteresYGuardaLosReportes	| centroDeControl robot terreno puntosDeInteres reportes | 		centroDeControl := CentroDeControl new.		terreno := Terreno conContenido: (Dictionary new		at: (10@40)  put: (Petroleo densidad: 0.75 cantidad: 100 profundidad: -3000);		at: (3@(-10)) put: (Oro cantidad: 70 profundidad: -2000);		at: (-100@8) put: (Oro cantidad: 350 profundidad: -800);		yourself	).		robot := Robot reportandoA: centroDeControl recorriendo: terreno.		puntosDeInteres := OrderedCollection with: (3@(-10))											with: (0@5)											with: (10@40)											with: (0@0).		centroDeControl iniciarMisionVisitando: puntosDeInteres conRobot: robot.		reportes := centroDeControl reportes.		self assert: reportes size equals: 4.	self assert: (reportes at: 1) equals: '(3,-10) --- ORO(70,-2000)'.	self assert: (reportes at: 2) equals: '(0,5) --- NADA'.	self assert: (reportes at: 3) equals: '(10,40) --- PETROLEO(0.75,100,-3000)'.	self assert: (reportes at: 4) equals: '(0,0) --- NADA'.! !TestCase subclass: #TestsRobotSensado	instanceVariableNames: 'robot resultadosReportados centroDeControl'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!TestsRobotSensado commentStamp: '<historical>' prior: 0!!!TestsRobotSensado methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:26'!test02ElRobotReportaLosResultados	| reportes |	"en la posición (0,0) no hay nada"	robot sensar.	"en la posición (0,1) hay oro"	robot moverHacia: Direccion arriba.	robot sensar.	"en la posición (1,1) hay petroleo"	robot moverHacia: Direccion derecha.	robot sensar.		reportes := centroDeControl reportes.		self assert: reportes size equals: 3.	self assert: (reportes at: 1) equals: '(0,0) --- NADA'.	self assert: (reportes at: 2) equals: '(0,1) --- ORO(80,-1000)'.	self assert: (reportes at: 3) equals: '(1,1) --- PETROLEO(0.75,700,-3000)'.! !!TestsRobotSensado methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:26'!test01ElRobotRegistraEnDiscoLasPosicionesSensadas	| posicionesSensadas |		robot sensar.		robot moverHacia: Direccion derecha.	robot moverHacia: Direccion arriba.		robot sensar.		robot moverHacia: Direccion abajo.		posicionesSensadas := robot posicionesSensadas.		self assert: posicionesSensadas size equals: 2.	self assert: (posicionesSensadas at: 1) equals: (0@0).	self assert: (posicionesSensadas at: 2) equals: (1@1).! !!TestsRobotSensado methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/1/2014 14:11'!terrenoDePrueba	| contenido |		contenido := Dictionary new					at: (0@1) put: (Oro cantidad: 80 profundidad: -1000);					at: (1@1) put: (Petroleo densidad: 0.75 cantidad: 700 profundidad: -3000);					yourself.						^ Terreno conContenido: contenido.! !!TestsRobotSensado methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/1/2014 14:02'!setUp	centroDeControl := CentroDeControl new.	robot := Robot reportandoA: centroDeControl recorriendo: self terrenoDePrueba.	resultadosReportados := OrderedCollection new.! !Object subclass: #Vacio	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Vacio commentStamp: '<historical>' prior: 0!!Object subclass: #Oro	instanceVariableNames: 'cantidad profundidad'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Oro commentStamp: '<historical>' prior: 0!!!Oro methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 20:40'!inicializarConCantidad: unNumero profundidad: otroNumero.	cantidad := unNumero.	profundidad := otroNumero.! !!Oro methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 20:49'!cantidad	^ cantidad! !!Oro methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 20:49'!profundidad	^ profundidad! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Oro class	instanceVariableNames: ''!!Oro class commentStamp: '<historical>' prior: 0!!!Oro class methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 20:40'!cantidad: unNumero profundidad: otroNumero	^ self new inicializarConCantidad: unNumero profundidad: otroNumero.! !Object subclass: #AjusteDeCoordenada	instanceVariableNames: 'coordenada robot destino'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!AjusteDeCoordenada commentStamp: '<historical>' prior: 0!!!AjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 19:29'!ejecutar	| direccion |	[self posicionDestino = self posicionRobot] whileFalse: [ 		(self posicionDestino > self posicionRobot)			 ifTrue: [ direccion := coordenada direccionCreciente ]			 ifFalse: [ direccion := coordenada direccionDecreciente ].		robot moverHacia: direccion.	].! !!AjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 19:29'!posicionRobot	^ coordenada obtenerPara: robot.! !!AjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 19:29'!posicionDestino	^ coordenada obtenerPara: destino.! !!AjusteDeCoordenada methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 19:28'!inicializarPara: unRobot yendoHacia: unDestino ajustandoCoordenada: unaCoordenada	robot := unRobot.	destino := unDestino.	coordenada := unaCoordenada.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AjusteDeCoordenada class	instanceVariableNames: ''!!AjusteDeCoordenada class commentStamp: '<historical>' prior: 0!!!AjusteDeCoordenada class methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 19:00'!para: unRobot yendoHacia: unDestino ajustandoCoordenada: indicadorDeCoordenada.	^ self new inicializarPara: unRobot yendoHacia: unDestino ajustandoCoordenada: indicadorDeCoordenada.! !Object subclass: #Mision	instanceVariableNames: 'destinos robot'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Mision commentStamp: '<historical>' prior: 0!!!Mision methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 18:55'!inicializarConDestinos: unaListaDePuntos robot: unRobot.	destinos := unaListaDePuntos.	robot := unRobot.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mision class	instanceVariableNames: ''!!Mision class commentStamp: '<historical>' prior: 0!!!Mision class methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 18:54'!visitando: destinos con: unRobot	^ self new inicializarConDestinos: destinos robot: unRobot.! !TestCase subclass: #TestsRobotMovimiento	instanceVariableNames: 'robot resultadosReportados centroDeControl'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!TestsRobotMovimiento commentStamp: '<historical>' prior: 0!!!TestsRobotMovimiento methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:25'!test03AlMoverseALaDerechaSeIncrementaLaCoordenadaX	| direccion |		direccion := Direccion derecha.		robot moverHacia: direccion.	self assert: robot posicion equals: (1@0).		robot moverHacia: direccion.	self assert: robot posicion equals: (2@0).! !!TestsRobotMovimiento methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:25'!test02ElRobotIndicaLasCoordenadasPorSeparado	self assert: robot x equals: 0.	self assert: robot y equals: 0.! !!TestsRobotMovimiento methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:25'!test01ElRobotComienzaEnLaPosicionX0Y0	self assert: robot posicion equals: (0@0).! !!TestsRobotMovimiento methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:25'!test04AlMoverseALaIzquierdaSeDisminuyeLaCoordenadaX	| direccion |		direccion := Direccion izquierda.		robot moverHacia: direccion.	self assert: robot posicion equals: (-1@0).		robot moverHacia: direccion.	self assert: robot posicion equals: (-2@0).! !!TestsRobotMovimiento methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:25'!test05AlMoverseHaciaAbajoSeDisminuyeLaCoordenadaY	| direccion |		direccion := Direccion abajo.		robot moverHacia: direccion.	self assert: robot posicion equals: (0@(-1)).		robot moverHacia: direccion.	self assert: robot posicion equals: (0@(-2)).! !!TestsRobotMovimiento methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:26'!test06AlMoverseHaciaArribaSeIncrementaLaCoordenadaY	| direccion |		direccion := Direccion arriba.		robot moverHacia: direccion.	self assert: robot posicion equals: (0@1).		robot moverHacia: direccion.	self assert: robot posicion equals: (0@2).! !!TestsRobotMovimiento methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/4/2014 22:34'!setUp	| terreno |	centroDeControl := CentroDeControl new.	terreno := Terreno conContenido: Dictionary new.	robot := Robot reportandoA: centroDeControl recorriendo: terreno.	resultadosReportados := OrderedCollection new.! !TestCase subclass: #TestsMision	instanceVariableNames: 'robot'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!TestsMision commentStamp: '<historical>' prior: 0!!!TestsMision methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:28'!test03SeIndicaAlRobotQueSenseTodosLosPuntosDeInteres	| puntosDeInteres posicionesSensadas |		puntosDeInteres := OrderedCollection with: (10@15)											with: (1@2)											with: (25@(-8)).		(Mision visitando: puntosDeInteres  con: robot) ejecutar.		posicionesSensadas := robot posicionesSensadas.		self assert: posicionesSensadas size equals: 3.	self assert: (posicionesSensadas at: 1) equals: (10@15).	self assert: (posicionesSensadas at: 2) equals: (1@2).	self assert: (posicionesSensadas at: 3) equals: (25@(-8)).! !!TestsMision methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:28'!test01SeIndicaAlRobotQueVisiteElPuntoDeInteresDeLaMision	| puntosDeInteres |		puntosDeInteres := OrderedCollection with: (10@15).		(Mision visitando: puntosDeInteres  con: robot) ejecutar.		self assert: robot posicion equals: (10@15).! !!TestsMision methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:28'!test02ElRobotTerminaEnElUltimoPuntoDeInteres	| puntosDeInteres |		puntosDeInteres := OrderedCollection with: (10@15)											with: (0@(-2)).		(Mision visitando: puntosDeInteres  con: robot) ejecutar.		self assert: robot posicion equals: (0@(-2)).! !!TestsMision methodsFor: 'as yet unclassified' stamp: 'JuanEdi 6/5/2014 01:51'!setUp	robot := Robot reportandoA: CentroDeControl new recorriendo: (Terreno conContenido: Dictionary new).! !Object subclass: #Terreno	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Terreno commentStamp: '<historical>' prior: 0!!Object subclass: #CentroDeControl	instanceVariableNames: 'reportes'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!CentroDeControl commentStamp: '<historical>' prior: 0!!!CentroDeControl methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 21:39'!reportar: unReporte	reportes add: unReporte.! !!CentroDeControl methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 21:38'!initialize	reportes := OrderedCollection new.! !!CentroDeControl methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 21:38'!reportes		^ reportes copy.! !!CentroDeControl methodsFor: 'as yet unclassified' stamp: 'JuanEdi 5/31/2014 18:56'!iniciarMisionVisitando: unaListaDePuntos conRobot: unRobot 		(Mision visitando: unaListaDePuntos con: unRobot) ejecutar.! !Object subclass: #EjeDeCoordenadas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!EjeDeCoordenadas commentStamp: '<historical>' prior: 0!!Object subclass: #Direccion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP3'!!Direccion commentStamp: '<historical>' prior: 0!!